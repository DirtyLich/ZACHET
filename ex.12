/*Разработайте функцию, которая находит в массиве точек те,  которые находятся в выбранной пользователем четверти. Функция возвращает массив указателей на найденный точки.*/

// Определяем структуру точки
struct Point {
    int x;
    int y;
};

// Функция, которая находит точки в выбранной четверти
struct Point** find_points_in_quarter(struct Point* points, int size, int quarter) {
    // Выделяем память для массива указателей на точки
    struct Point** result = malloc(size * sizeof(struct Point*));
    int count = 0;
    for (int i = 0; i < size; i++) {
        // Определяем, в какой четверти находится точка
        int x = points[i].x;
        int y = points[i].y;
        int q;
        if (x >= 0 && y >= 0) {
            q = 1;
        } else if (x < 0 && y >= 0) {
            q = 2;
        } else if (x < 0 && y < 0) {
            q = 3;
        } else {
            q = 4;
        }
        // Если точка находится в выбранной четверти, добавляем ее в массив результатов
        if (q == quarter) {
            result[count] = &points[i];
            count++;
        }
    }
    // Уменьшаем размер выделенной памяти до количества найденных точек
    result = realloc(result, count * sizeof(struct Point*));
    return result;
}

// Функция main для проверки
int main() {
    struct Point points[] = {{1, 2}, {-3, 4}, {5, -6}, {-7, -8}};
    int size = sizeof(points) / sizeof(points[0]);
    int quarter = 2;
    struct Point** result = find_points_in_quarter(points, size, quarter);
    int count = 0;
    // Выводим найденные точки на экран
    for (int i = 0; i < size; i++) {
        if (result[i] != NULL) {
            printf("Point %d: (%d, %d)\n", count + 1, result[i]->x, result[i]->y);
            count++;
        }
    }
    // Освобождаем выделенную память
    free(result);
    return 0;
}
