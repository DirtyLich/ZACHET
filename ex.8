#include <stdio.h>
#include <string.h>

// Функция для поиска самой длинной последовательности латинских букв, расположенных в алфавитном порядке
int longest_alphabetic_sequence(char* str) {
    // Инициализируем переменные для хранения текущей и максимальной длины последовательности
    int max_length = 0;         // Максимальная длина последовательности
    int current_length = 1;     // Текущая длина последовательности (изначально 1, т.к. любая буква - последовательность)
    
    // Вычисляем длину строки
    int n = strlen(str);
    
    // Перебираем все символы в строке
    for (int i = 1; i < n; i++) {
        // Если текущий символ больше предыдущего в алфавитном порядке, то текущая последовательность продолжается
        if (str[i] > str[i-1]) {
            current_length++;   // Увеличиваем текущую длину на единицу
        } else {
            // Иначе текущая последовательность закончилась, и мы проверяем ее длину
            if (current_length > max_length) {
                max_length = current_length;    // Записываем новый максимум
            }
            current_length = 1;     // Сбрасываем текущую длину до 1, чтобы начать поиск новой последовательности
        }
    }
    
    // Проверяем последнюю последовательность на максимальность
    if (current_length > max_length) {
        max_length = current_length;    // Записываем новый максимум
    }
    
    // Возвращаем максимальную длину последовательности
    return max_length;
}

// Главная функция программы
int main() {
    // Создаем пример строки
    char str[] = "abcdeefghijk";
    
    // Вызываем функцию для поиска самой длинной последовательности в строке
    int result = longest_alphabetic_sequence(str);
    
    // Выводим результат на экран
    printf("%d\n", result);
    
    // Возвращаем 0, чтобы сообщить операционной системе, что программа завершилась успешно
    return 0;
}
